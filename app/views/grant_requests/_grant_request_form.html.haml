= form.input :program_organization_lookup, :label => "Program Organization", :as => :autocomplete, :autocomplete_url => organizations_path(:format => :json), :related_attribute_name => :name, :input_html => {:class => 'program_organization_lookup_select', 'data-related-child' => ".program-org-sat-select"}
- program_organization_satellites = form.object.program_organization ? form.object.program_organization.satellites : []
= form.input :program_organization, :label => 'Location: ', :as => :select, :input_html => {:class => 'program-org-sat-select', 'data-param'.to_sym => 'related_org_ids', 'data-src'.to_sym => organizations_path(:format => 'json'), 'data-cache'.to_sym => 'org_sat_select', 'data-required' => '1'}, :collection => program_organization_satellites.map {|org| [org.name, org.id]}

= form.input :program_organization_lookup, :label => "Fiscal Organization", :as => :autocomplete, :autocomplete_url => organizations_path(:format => :json), :related_attribute_name => :name, :input_html => {:class => 'fiscal_organization_lookup_select', 'data-related-child' => ".fiscal-org-sat-select"}
- fiscal_organization_satellites = form.object.fiscal_organization ? form.object.fiscal_organization.satellites : []
= form.input :fiscal_organization, :label => 'Location: ', :as => :select, :input_html => {:class => 'fiscal-org-sat-select', 'data-param'.to_sym => 'related_org_ids', 'data-src'.to_sym => organizations_path(:format => 'json'), 'data-cache'.to_sym => 'org_sat_select', 'data-required' => '1'}, :collection => fiscal_organization_satellites.map {|org| [org.name, org.id]}

= form.input :amount_requested, :label => "Amount Requested" if model.state_in(GrantRequest.pre_recommended_chain + Request.grant_states)

= form.input :program, :label => "Program", :as => :select, :collection => Program.all.map{|program| [program.name, program.id]}
- # TODO ESH: this needs to happen on the javascript side based on what is chosen above; probably be able to use the same prog-org/location mechanism
= form.input :program_lead, :label => "Program Lead", :as => :select, :collection => User.all.map{|user| [user.name, user.id]}

= form.input :initiative, :label => "Initiative", :as => :select, :collection => Initiative.all.map{|initiative| [initiative.name, initiative.id]}

= form.input :project_summary, :label => "Project Summary", :as => :text

= render :partial => "model_documents/list_model_documents", :locals => { :model => model} unless model.state_in(GrantRequest.new_states)
= render(:partial => "grant_requests/approve_grant_details", :locals => { :model => model, :form => form}) if model.state_in(Request.grant_states)

- unless model.state_in GrantRequest.new_states
  = form.input :funding_general_operating_support, :label => "This grant is funding general operating support.", :label_class=>'wide_label'
  = form.input :board_authorization_required, :label => "This grant required direct board authority.", :label_class=>'wide_label'
  = form.input :renewal_grant, :label => "This grant is a renewal.", :label_class=>'wide_label'
  = form.input :initiative_types, :label => "Initiative types.", :label_class=>''
  - p "ESH: 111 state_in=#{model.state_in(GrantRequest.new_states + GrantRequest.pre_recommended_chain + GrantRequest.approval_chain.up_to(:pending_president_approval) + GrantRequest.sent_back_states + Request.grant_states)}"
  - p "ESH: 222 model.state=#{model.state}"
  - p "ESH: 333 possible_states=#{(GrantRequest.new_states + GrantRequest.pre_recommended_chain + GrantRequest.approval_chain.up_to(:pending_president_approval) + GrantRequest.sent_back_states + Request.grant_states).inspect}"
  = form.input(:amount_recommended, :label => "Recommended amount to fund.", :label_class=>'') if model.state_in(GrantRequest.new_states + GrantRequest.pre_recommended_chain + GrantRequest.approval_chain.up_to(:pending_president_approval) + GrantRequest.sent_back_states + Request.grant_states)
  = form.input :duration_in_months, {:label => 'Duration (months):', :as => :select, :collection => (1..36).to_a, :input_html => {:class => 'select_short'}}
  = form.input :ierf_start_at, :label => "Start Date:"
  = form.input :ierf_proposed_end_at, :label => "Final Proposal Date:"
  = form.input :ierf_budget_end_at, :label => "Final Budget Date:"
  -# TODO ESH: = render :partial => "grant_requests/funding_sources", :locals => { :model => model, :form => form}
  = form.input :constituents, :label => "Consituents:", :as => :select_transfer
  = form.input :usa_means, :label => "Means:", :as => :select_transfer
  = form.input :china_means, :label => "Type of Organization (China use only):", :as => :select_transfer

- unless model.state_in GrantRequest.new_states
  = form.input :ierf_goals, :label => "Goals: How does this grant or cluster of grants fit into your logic model?  What will this grant or cluster of grants accomplish if it is successful?", :label_class=>'wide_label'
  = form.input :ierf_tactics, :label => "Tactics: What are the primary means the grantee(s) will use?  How are the tactics linked to the strategy?", :label_class=>'wide_label'
  = form.input :ierf_probability, :label => "Probability: What is the likelihood that the grantee(s) will succeed in the tactics they lay out?  What are the possible failure scenarios?", :label_class=>'wide_label'

- unless model.state_in GrantRequest.new_states
  = form.input :ierf_due_diligence_overlap, :label => "Does this grant overlap with other sectors or key funders?  If so, please explain which sectors/funder, and provide any scheduled meetings.", :label_class=>'wide_label'
  = form.input :ierf_due_diligence_risks, :label => "Does this grant pose any institutional risks to EF?  If yes, please explain how these issues will be addressed.", :label_class=>'wide_label'
  = form.input :ierf_due_diligence_noc4_work, :label => "Have you carefully reviewed the proposal and budget to make sure that they contain no C4 work?", :label_class=>'wide_label'
  = form.input :ierf_due_diligence_board_review, :label => "Does this grant warrant input and/or review by board members?  If yes, please list board member name and any related information.", :label_class=>'wide_label'

= form.commit_button